# Common User Interface Patterns

## Filtering and Sorting a List

### Problem
You want to filter and sort a relatively small list of items all available on the client.

### Solution
For this example we render a list of friends using the `ng-repeat` directive. Using the built-in `filter` and `orderBy` Filters we filter and sort the friends list client-side.

    <body ng-app="MyApp">
      <div ng-controller="MyCtrl">
        <form class="form-inline">
          <input ng-model="query" type="text"
            placeholder="Filter by" autofocus>
        </form>
        <ul ng-repeat="friend in friends | filter:query | orderBy: 'name' ">
          <li>{{friend.name}}</li>
        </ul>
      </div>
    </body>

A plain text input field is used to enter the filter query and bound to the `filter`. Any changes are therefore directly used to filter the list.

The controller defines the default friends array:

    app.controller("MyCtrl", function($scope) {
      $scope.friends = [
        { name: "Peter",   age: 20 },
        { name: "Pablo",   age: 55 },
        { name: "Linda",   age: 20 },
        { name: "Marta",   age: 37 },
        { name: "Othello", age: 20 },
        { name: "Markus",  age: 32 }
      ];
    });

You can find the complete example on [github](https://github.com/fdietz/recipes-with-angular-js-examples/tree/master/chapter8/recipe1).

### Discussion
Chaining filters is a fantastic way to implement such a use case as long as you have all the data available on the client.

The [filter](http://docs.angularjs.org/api/ng.filter:filter) Angular.js Filter works on an array and returns a subset of items as a new array. It supports a String, Object or Function parameter. In this example we only use the String parameter, but given that the `$scope.friends` is an array of objects we could think of more complex examples where we use the Object param, as for example:

    <ul ng-repeat="friend in friends |
      filter: { name: query, age: '20' } |
      orderBy: 'name' ">
      <li>{{friend.name}} ({{friend.age}})</li>
    </ul>

That way we can filter by name and age at the same time. And lastly you could call a function defined in the controller which does the filtering for you:

    <ul ng-repeat="friend in friends |
      filter: filterFunction |
      orderBy: 'name' ">
      <li>{{friend.name}} ({{friend.age}})</li>
    </ul>

    $scope.filterFunction = function(element) {
      return element.name.match(/^Ma/) ? true : false;
    };

The `filterFunction` must returns either `true` or `false`. In this example we use a regular expression on the name starting with `Ma` to filter the list.

## Paginating Through Client-Side Data

### Problem
You have a table of data completely client-side and want to paginate through the data.

### Solution
Use a HTML table element with the `ng-repeat` directive to render only the items for the current page. All the pagination logic should be handled in a custom filter and controller implementation.

Let us start with the template using Twitter Bootstrap for the table and pagination elements:

    <div ng-controller="PaginationCtrl">
      <table class="table table-striped">
        <thead>
          <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr ng-repeat="item in items |
            offset: currentPage*itemsPerPage |
            limitTo: itemsPerPage">
            <td>{{item.id}}</td>
            <td>{{item.name}}</td>
            <td>{{item.description}}</td>
          </tr>
        </tbody>
        <tfoot>
          <td colspan="3">
            <div class="pagination">
              <ul>
                <li ng-class="prevPageDisabled()">
                  <a href ng-click="prevPage()">« Prev</a>
                </li>
                <li ng-repeat="n in range()"
                  ng-class="{active: n == currentPage}" ng-click="setPage(n)">
                  <a href="#">{{n+1}}</a>
                </li>
                <li ng-class="nextPageDisabled()">
                  <a href ng-click="nextPage()">Next »</a>
                </li>
              </ul>
            </div>
          </td>
        </tfoot>
      </table>
    </div>

The `offset` Filter is responsible for selecting the subset of items for the current page. It uses the `slice` function on the Array given the start param as the index.

    app.filter('offset', function() {
      return function(input, start) {
        start = parseInt(start, 10);
        return input.slice(start);
      };
    });

The controller manages the actual `$scope.items` array and handles the logic for enabling/disabling the pagination buttons.

    app.controller("PaginationCtrl", function($scope) {

      $scope.itemsPerPage = 5;
      $scope.currentPage = 0;
      $scope.items = [];

      for (var i=0; i<50; i++) {
        $scope.items.push({
          id: i, name: "name "+ i, description: "description " + i
        });
      }

      $scope.prevPage = function() {
        if ($scope.currentPage > 0) {
          $scope.currentPage--;
        }
      };

      $scope.prevPageDisabled = function() {
        return $scope.currentPage === 0 ? "disabled" : "";
      };

      $scope.pageCount = function() {
        return Math.ceil($scope.items.length/$scope.itemsPerPage)-1;
      };

      $scope.nextPage = function() {
        if ($scope.currentPage < $scope.pageCount()) {
          $scope.currentPage++;
        }
      };

      $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.pageCount() ? "disabled" : "";
      };

    });

You can find the complete example on [github](https://github.com/fdietz/recipes-with-angular-js-examples/tree/master/chapter8/recipe2).

### Discussion
The initial idea of this pagination solution can be best explained by looking into the usage of `ng-repeat` to render the table rows for each item:

    <tr ng-repeat="item in items |
      offset: currentPage*itemsPerPage |
      limitTo: itemsPerPage">
      <td>{{item.id}}</td>
      <td>{{item.name}}</td>
      <td>{{item.description}}</td>
    </tr>

The `offset` filter uses the `currentPage*itemsPerPage` to calculate the offset for the array slice operation. This will generate an array from the offset to the end of the array. Then we use the built-in `limitTo` filter to subset the array to the number of `itemsPerPage`. All this is done on the client side with filters only.

The controller is responsible for supporting a `nextPage` and `prevPage` action and the accompanying functions to check the disabled state of these actions via `ng-class` directive: `nextPageDisabled` and `prevPageDisabled`. The `prevPage` function first checks if it has not reached the first page yet before decrementing the `currentPage` and the `nextPage` does the same for the last page and the same logic is applied for the disabled checks.

This example is already quite involved and I intentionally left out to explain the rendering of links between the previous and next buttons. The [full implementation](https://github.com/fdietz/recipes-with-angular-js-examples/tree/master/chapter8/recipe2) is online though for you to investigate.

## Paginating Through Server-Side Data

### Problem
You want to paginate through a large server-side result set.

### Solution
You cannot use the previous method with a filter since that would require for all data to be available on the client. Instead we use an implementation with a controller only instead.

The template has not changed much, only the `ng-repeat` directive looks simpler now:

    <tr ng-repeat="item in pagedItems">
      <td>{{item.id}}</td>
      <td>{{item.name}}</td>
      <td>{{item.description}}</td>
    </tr>

In order to simplify the example we fake a server-side service by providing an Angular service implementation for the items.

    app.factory("Item", function() {

      var items = [];
      for (var i=0; i<50; i++) {
        items.push({
          id: i, name: "name "+ i, description: "description " + i
        });
      }

      return {
        get: function(offset, limit) {
          return items.slice(offset, offset+limit);
        },
        total: function() {
          return items.length;
        }
      };
    });

The service manages a list of items and has methods for retrieving a subset of items for a given offset and limit and the total number of items.

The controller uses dependency injection to access the `Item` service and contains almost the same methods as our previous recipe.

    app.controller("PaginationCtrl", function($scope, Item) {

      $scope.itemsPerPage = 5;
      $scope.currentPage = 0;

      $scope.prevPage = function() {
        if ($scope.currentPage > 0) {
          $scope.currentPage--;
        }
      };

      $scope.prevPageDisabled = function() {
        return $scope.currentPage === 0 ? "disabled" : "";
      };

      $scope.nextPage = function() {
        if ($scope.currentPage < $scope.pageCount() - 1) {
          $scope.currentPage++;
        }
      };

      $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.pageCount() - 1 ? "disabled" : "";
      };

      $scope.pageCount = function() {
        return Math.ceil($scope.total/$scope.itemsPerPage);
      };

      $scope.$watch("currentPage", function(newValue, oldValue) {
        $scope.pagedItems =
          Item.get(newValue*$scope.itemsPerPage, $scope.itemsPerPage);
        $scope.total = Item.total();
      });

    });

You can find the complete example on [github](https://github.com/fdietz/recipes-with-angular-js-examples/tree/master/chapter8/recipe3).

### Discussion
When you select the next/previous page you will change the `$scope.currentPage` value and the `$watch` function is triggered. It fetches fresh items for the current page and the total number of items. So, on the client side we only have 5 items available as defined in `itemsPerPage` and when paginating we throw away the items of the previous page and fetch new items.

If you want to try this with a real backend you only have to swap out the `Item` service implementation.

## Paginating Using Infinite Results

### Problem
You want to paginate through server-side data with a "Load More" button which just keeps appending more data until no more data is available.

### Solution
Lets first look at how the item table is rendered with the `ng-repeat` Directive.

    <div ng-controller="PaginationCtrl">
      <table class="table table-striped">
        <thead>
          <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr ng-repeat="item in pagedItems">
            <td>{{item.id}}</td>
            <td>{{item.name}}</td>
            <td>{{item.description}}</td>
          </tr>
        </tbody>
        <tfoot>
          <td colspan="3">
            <button class="btn" href="#" ng-class="nextPageDisabledClass()"
              ng-click="loadMore()">Load More</button>
          </td>
        </tfoot>
      </table>
    </div>

The controller uses the same `Item` Service as used for the previous recipe and handles the logic for the "Load More" button.

    app.controller("PaginationCtrl", function($scope, Item) {

      $scope.itemsPerPage = 5;
      $scope.currentPage = 0;
      $scope.total = Item.total();
      $scope.pagedItems = Item.get($scope.currentPage*$scope.itemsPerPage,
        $scope.itemsPerPage);

      $scope.loadMore = function() {
        $scope.currentPage++;
        var newItems = Item.get($scope.currentPage*$scope.itemsPerPage,
          $scope.itemsPerPage);
        $scope.pagedItems = $scope.pagedItems.concat(newItems);
      };

      $scope.nextPageDisabledClass = function() {
        return $scope.currentPage === $scope.pageCount()-1 ? "disabled" : "";
      };

      $scope.pageCount = function() {
        return Math.ceil($scope.total/$scope.itemsPerPage);
      };

    });

You can find the complete example on [github](https://github.com/fdietz/recipes-with-angular-js-examples/tree/master/chapter8/recipe4).

### Discussion
The solution is actually pretty similar to the previous recipe and uses a controller only again. The `$scope.pagedItems` is retrieved initially to render the first five items.

When pressing the "Load More" button we fetch another set of items incrementing the `currentPage` to change the `offset` of the `Item.get` function. The new items will be concatenated with the existing items using the Array `concat` function. The changes to `pagedItems` will be automatically rendered by the `ng-repeat` directive.

The `nextPageDisabledClass` checks if there is more data available by calculating the total number of pages in `pageCount` and comparing that to the current page.

## Displaying a Flash Notice/Failure Message

### Problem
You want to display a flash confirmation message after a user submitted a form successfully.

### Solution
In a web framework like Rails the form submit will lead to a redirect with the flash confirmation message, relying on the browser session. For our client-side approach we bind to route changes and manage a queue of flash messages.

In our example we use a home page with a form and on form submit we navigate to another page and show the flash message. We use the `ng-view` Directive and define the two pages as script tags here.

      <body ng-app="MyApp" ng-controller="MyCtrl">

        <ul class="nav nav-pills">
          <li><a href="#/">Home</a></li>
          <li><a href="#/page">Next Page</a></li>
        </ul>

        <div class="alert" ng-show="flash.getMessage()">
          <b>Alert!</b>
          <p>{{flash.getMessage()}}</p>
        </div>

        <ng-view></ng-view>

        <script type="text/ng-template" id="home.html">
          <h3>Home</h3>

          <form ng-submit="submit(message)" class="form-inline">
            <input type="text" ng-model="message" autofocus>
            <button class="btn">Submit</button>
          </form>

        </script>

        <script type="text/ng-template" id="page.html">
          <h3>Next Page</h3>

        </script>

      </body>

Note, that the flash message just like the navigation is always shown but conditionally hidden depending on if there is a flash message available.

The route definition defines the pages, nothing new here for us:

    var app = angular.module("MyApp", []);

    app.config(function($routeProvider) {
      $routeProvider.
        when("/home", { templateUrl: "home.html" }).
        when("/page", { templateUrl: "page.html" }).
        otherwise({ redirectTo: "/home" });
    });

The interesting part is the `flash` service which handles a queue of messages and listens for route changes to provide a message from the queue to the current page.

    app.factory("flash", function($rootScope) {
      var queue = [];
      var currentMessage = "";

      $rootScope.$on("$routeChangeSuccess", function() {
        currentMessage = queue.shift() || "";
      });

      return {
        setMessage: function(message) {
          queue.push(message);
        },
        getMessage: function() {
          return currentMessage;
        }
      };
    });

The controller handles the form submit and navigates to the other page.

    app.controller("MyCtrl", function($scope, $location, flash) {
      $scope.flash = flash;
      $scope.message = "Hello World";

      $scope.submit = function(message) {
        flash.setMessage(message);
        $location.path("/page");
      }
    });

The flash service is dependency injected into the controller and made available to the scope since we want to use it in our template.

When you press the submit button you will be navigated to the other page and see the flash message. Note, that using the navigation to go back and forth between pages doesn't show the flash message.

You can find the complete example on [github](https://github.com/fdietz/recipes-with-angular-js-examples/tree/master/chapter8/recipe5).

### Discussion
The controller uses the `setMessage` function of the `flash` service and the service stores the message in an array called `queue`. When the controller then uses `$location` service to navigate the service `routeChangeSuccess` listener will be called and retrieves the message from the queue.

In the template we use `ng-show` to hide the div element with the flash messaging using `flash.getMessage()`.

Since this is a service it can be used anywhere in your code and it will show a flash message on the next route change.

## Editing Text In-Place using HTML5 ContentEditable

### Problem
You want to make a div element editable in place using the HTML5 contenteditable attribute.

### Solution
Implement a directive for the `contenteditable` attribute and use `ng-model` for data binding.

In the example we use a div and a paragraph to render the content.

    <div contenteditable ng-model="text"></div>
    <p>{{text}}</p>

The directive is especially interesting since it uses `ng-model` instead of custom attributes.

    app.directive("contenteditable", function() {
      return {
        restrict: "A",
        require: "ngModel",
        link: function(scope, element, attrs, ngModel) {

          function read() {
            ngModel.$setViewValue(element.html());
          }

          ngModel.$render = function() {
            element.html(ngModel.$viewValue || "");
          };

          element.bind("blur keyup change", function() {
            scope.$apply(read);
          });
        }
      };
    });

You can find the complete example on [github](https://github.com/fdietz/recipes-with-angular-js-examples/tree/master/chapter8/recipe6).

### Discussion
The directive is restricted for usage as an HTML attribute since we want to use the HTML5 contenteditable attribute as is instead of defining a new HTML element.

It requires the `ngModel` controller for data binding in conjunction with the link function. The implementation binds an event listener which executes the `read` function with [apply](http://docs.angularjs.org/api/ng.$rootScope.Scope). This ensures that even though we call the `read` function from within a DOM event handler we notify Angular about it.

The `read` function updates the model based on the view's user input. And the `$render` function is doing the same in the other direction, updating the view for us whenever the model changes.

The directive is surprisingly simple leaving the `ng-model` aside. But, without the `ng-model` support we would have to come up with our own model-attribute handling which would be not consistent with other directives.

## Displaying a Modal Dialog

### Question
You want to use a Modal Dialog using the Twitter Bootstrap Framework. A dialog is called modal when it is blocking the rest of your web application until it is closed.

### Solution
Use the `angular-ui` module's nice `modal` plugin which directly supports Twitter Bootstrap.

The template defines a button to open the modal and the modal code itself.

    <body ng-app="MyApp" ng-controller="MyCtrl">

      <button class="btn" ng-click="open()">Open Modal</button>

      <div modal="showModal" close="cancel()">
        <div class="modal-header">
            <h4>Modal Dialog</h4>
        </div>
        <div class="modal-body">
            <p>Example paragraph with some text.</p>
        </div>
        <div class="modal-footer">
          <button class="btn btn-success" ng-click="ok()">Okay</button>
          <button class="btn" ng-click="cancel()">Cancel</button>
        </div>
      </div>

    </body>

Note, that even though we don't specify it explicitly the modal dialog is hidden initially via the `modal` attribute. The controller only handles the button click and the `showModal` value used by the `modal` attribute.

    var app = angular.module("MyApp", ["ui.bootstrap.modal"]);

    $scope.open = function() {
      $scope.showModal = true;
    };

    $scope.ok = function() {
      $scope.showModal = false;
    };

    $scope.cancel = function() {
      $scope.showModal = false;
    };


Do not forget to download and include the angular-ui.js file in a script tag. The module dependency is defined directly to "ui.bootstrap.modal". The [full example](https://github.com/fdietz/recipes-with-angular-js-examples/tree/master/chapter8/recipe7) is available on Github including the angular-ui module.

You can find the complete example on [github](https://github.com/fdietz/recipes-with-angular-js-examples/tree/master/chapter8/recipe7).

### Discussion
The modal as defined in the template is straight from the Twitter bootstrap [documentation](http://twitter.github.com/bootstrap/javascript.html#modals). We can control the visibility with the `modal` attribute. Additionally, the `close` attribute defines a `close` function which is called whenever the dialog is closed. Note, that this could happen when the user presses the `escape` key or clicking outside the modal.

Our own cancel button uses the same function to close the modal manually, whereas the okay button uses the `ok` function. This makes it easy for us to distinguish if a user simply cancelled the modal or actually pressed the okay button.

## Displaying a Loading Spinner

### Problem
You want to display a loading spinner while waiting for an AJAX request to be finished.

### Solution
We use the Twitter search API for our example to render a list of search results. When pressing the button the AJAX request is run and the spinner image should be shown until the request is done.

    <body ng-app="MyApp" ng-controller="MyCtrl">

      <div>
        <button class="btn" ng-click="load()">Load Tweets</button>
        <img id="spinner" ng-src="img/spinner.gif" style="display:none;">
      </div>

      <div>
        <ul ng-repeat="tweet in tweets">
          <li>
            <img ng-src="{{tweet.profile_image_url}}" alt="">
            &nbsp; {{tweet.from_user}}
            {{tweet.text}}
          </li>
        </ul>
      </div>

    </body>


An Angular.js interceptor for all AJAX calls is used which allows to execute code before the actual request is started and when it is finished.

    var app = angular.module("MyApp", ["ngResource"]);

    app.config(function ($httpProvider) {
      $httpProvider.responseInterceptors.push('myHttpInterceptor');

      var spinnerFunction = function spinnerFunction(data, headersGetter) {
        $("#spinner").show();
        return data;
      };

      $httpProvider.defaults.transformRequest.push(spinnerFunction);
    });

    app.factory('myHttpInterceptor', function ($q, $window) {
      return function (promise) {
        return promise.then(function (response) {
          $("#spinner").hide();
          return response;
        }, function (response) {
          $("#spinner").hide();
          return $q.reject(response);
        });
      };
    });

Note, that we use jQuery to show the spinner in the configuration step and hide the spinner in the interceptor.

Additionally we use a controller to handle the button click and executing the search request.

    app.controller("MyCtrl", function($scope, $resource, $rootScope) {

      $scope.resultsPerPage = 5;
      $scope.page = 1;
      $scope.searchTerm = "angularjs";

      $scope.twitter = $resource('http://search.twitter.com/search.json',
        { callback:'JSON_CALLBACK',
          page: $scope.page,
          rpp: $scope.resultsPerPage,
          q: $scope.searchTerm },
        { get: { method:'JSONP' } });

      $scope.load = function() {
        $scope.twitter.get(function(data) {
          $scope.tweets = data.results;
        });
      };
    });

Don't forget that add `ngResource` to the module and load it via script tag.

You can find the complete example on [github](https://github.com/fdietz/recipes-with-angular-js-examples/tree/master/chapter8/recipe8).

### Discussion
The template is the easy part of this recipe since it renders a list of tweets using the `ng-repeat` directive. Let us jump straight to the interceptor code.

The interceptor is implemented using the factory method and attaches itself to the promise function of the AJAX response to hide the spinner on success or failure. Note, that on failure we use the `reject` function of the [$q](http://docs.angularjs.org/api/ng.$q) service, Angular's promise/deferred implementation.

Now, in the `config` method we add our inceptor to the list of responseInterceptors of `$httpProvider` to register it properly. In a similar manner we add the `spinnerFunction` to the default `transformRequest` list in order to call it before each AJAX request.

The controller is responsible for using a `$resource` object and handling the button click with the `load` function. We are using JSONP here to allow this code to be executed locally even though it is served by a different domain.